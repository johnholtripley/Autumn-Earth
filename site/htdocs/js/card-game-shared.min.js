"use strict";if(void 0===isCardGameANetworkGame)var isCardGameANetworkGame=!1;var thisMovesScore,indexToCheck,indexesToRemove,whichMoveToMake,listOfPossibleBestMoves,cardGameNameSpace={cardWidth:84,cardHeight:102,board:[],compareZIndex:function(a,e){return a.zIndex<e.zIndex?-1:a.zIndex>e.zIndex?1:0},compareColours:function(a,e){var r=parseInt(a.substring(1,3),16),c=parseInt(a.substring(3,5),16),m=parseInt(a.substring(5,7),16),d=parseInt(e.substring(1,3),16),t=parseInt(e.substring(3,5),16),s=parseInt(e.substring(5,7),16);return(r-d)*(r-d)+(c-t)*(c-t)+(m-s)*(m-s)},initialiseCardGame:function(){if(cardGameNameSpace.board=[["#","#","x","x","x","-","-","x","x","x","x","x"],["#","#","x","x","-","-","-","-","x","x","@","@"],["#","#","x","-","-","-","-","-","-","x","@","@"],["#","#","x","-","-","-","-","-","-","x","@","@"],["#","#","x","x","-","-","-","-","x","x","@","@"],["x","x","x","x","x","-","-","x","x","x","@","@"]],cardGameNameSpace.boardWidth=cardGameNameSpace.board[0].length,cardGameNameSpace.boardHeight=cardGameNameSpace.board.length,cardGameNameSpace.maxCardAnimationFrames=10,cardGameNameSpace.playerColours=["","#36bbed","#ff00cc"],"undefined"!=typeof playersCardBack&&(cardGameNameSpace.playerColours[2]=playersCardBack),void 0!==cardGameNameSpace.NPCCardBackColour&&(cardGameNameSpace.playerColours[1]=cardGameNameSpace.NPCCardBackColour),cardGameNameSpace.compareColours(cardGameNameSpace.playerColours[1],cardGameNameSpace.playerColours[2])<3500){do{var a="#"+Math.floor(16777215*Math.random()).toString(16)}while(cardGameNameSpace.compareColours(a,cardGameNameSpace.playerColours[2])<3501);cardGameNameSpace.playerColours[1]=a,thisNPC&&(thisNPC.cardBackColour=cardGameNameSpace.playerColours[1])}cardGameNameSpace.allCardsThisGame=cardGameNameSpace.player1Cards.concat(cardGameNameSpace.player2Cards),cardGameNameSpace.numberOfCardsInGame=cardGameNameSpace.allCardsThisGame.length,cardGameNameSpace.allCardsToLoadThisGame=uniqueValues(cardGameNameSpace.allCardsThisGame),cardGameNameSpace.numberOfCardTypes=cardGameNameSpace.allCardsToLoadThisGame.length,cardGameNameSpace.imagesToLoad=[{name:"board",src:"/images/card-game/board.jpg"},{name:"selected",src:"/images/card-game/selected-card.png"},{name:"current",src:"/images/card-game/current-player.png"}];for(var e=0;e<cardGameNameSpace.numberOfCardTypes;e++)cardGameNameSpace.imagesToLoad.push({name:"card"+cardGameNameSpace.allCardsToLoadThisGame[e],src:"/images/card-game/cards/"+cardGameNameSpace.allCardsToLoadThisGame[e]+".png"});document.getElementById("cardGame").addEventListener("click",cardGameNameSpace.canvasClick,!1),cardGameNameSpace.gameMode="loading",Loader.preload(cardGameNameSpace.imagesToLoad,cardGameNameSpace.initCardGame,loadingProgress)},getCanvasPosition:function(){var a=document.getElementById("cardGame").getBoundingClientRect();cardGameNameSpace.outerCanvasLeft=a.left,cardGameNameSpace.outerCanvasTop=a.top,cardGameNameSpace.outerCanvasWidth=a.right-a.left,cardGameNameSpace.outerCanvasHeight=a.bottom-a.top,cardGameNameSpace.pageLoadScroll=document.body.scrollTop+document.documentElement.scrollTop},placeCardOnBoard:function(a,e,r,c){cardGameNameSpace.board[r][e]=a,cardGameNameSpace.cards[a].x=e*cardGameNameSpace.cardWidth,cardGameNameSpace.cards[a].y=r*cardGameNameSpace.cardHeight,cardGameNameSpace.cards[a].hasBeenPlaced=c},checkAttacksInAllDirections:function(a,e,r,c,m,d,t){cardGameNameSpace.checkAttack(a,e,-1,0,r,c,m,d,t),cardGameNameSpace.checkAttack(a,e,1,0,r,c,m,d,t),cardGameNameSpace.checkAttack(a,e,0,-1,r,c,m,d,t),cardGameNameSpace.checkAttack(a,e,0,1,r,c,m,d,t),cardGameNameSpace.checkAttack(a,e,-1,-1,r,c,m,d,t),cardGameNameSpace.checkAttack(a,e,1,1,r,c,m,d,t),cardGameNameSpace.checkAttack(a,e,-1,1,r,c,m,d,t),cardGameNameSpace.checkAttack(a,e,1,-1,r,c,m,d,t)},checkAttack:function(a,e,r,c,m,d,t,s,o){var p=0,n=[],i=a+r,S=e+c;do{var G=!1;if(S>=0&&S<cardGameNameSpace.boardHeight){var l=m[S][i];if(!isNaN(l)&&d[l].currentOwner==t){G=!0,n.push(l);var N=Math.abs(d[l].cardType);p+=parseInt(cardGameNameSpace.allCardData[N][1]),i+=r,S+=c}}}while(G);var h=Math.abs(d[m[e][a]].cardType);if(cardGameNameSpace.placedCardsAttack=parseInt(cardGameNameSpace.allCardData[h][0]),S>=0&&S<cardGameNameSpace.boardHeight&&!isNaN(m[S][i])&&d[m[S][i]].currentOwner==s){var u=Math.abs(d[m[S][i]].cardType),C=parseInt(cardGameNameSpace.allCardData[u][0]);if(cardGameNameSpace.placedCardsAttack+C>=p)if(o){thisMovesScore+=n.length;for(var g=0;g<n.length;g++)d[n[g]].currentOwner=s}else for(g=0;g<n.length;g++)cardGameNameSpace.flipCard(n[g],d,s)}},flipCard:function(a,e,r){e[a].currentOwner=r,e[a].flippedAnimation=10,e[a].zIndex=1,2==r&&hero.stats.numberOfcardsFlipped++},canvasClick:function(a){a&&a.preventDefault();var e=a.clientX+document.body.scrollLeft+document.documentElement.scrollLeft-cardGameNameSpace.outerCanvasLeft,r=a.clientY+document.body.scrollTop+document.documentElement.scrollTop-cardGameNameSpace.outerCanvasTop-cardGameNameSpace.pageLoadScroll;switch(cardGameNameSpace.gameMode){case"play":case"cardGame":var c=Math.floor(e/cardGameNameSpace.outerCanvasWidth*cardGameNameSpace.boardWidth),m=Math.floor(r/cardGameNameSpace.outerCanvasHeight*cardGameNameSpace.boardHeight),d=cardGameNameSpace.board[m][c];if("-"==d)-1!=cardGameNameSpace.currentlySelectedCard&&cardGameNameSpace.isValidMove(c,m,cardGameNameSpace.board)&&(cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].isMovingToBoard=!0,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].gridX=c,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].gridY=m,cardGameNameSpace.board[m][c]=cardGameNameSpace.currentlySelectedCard,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].zIndex=1,cardGameNameSpace.currentlySelectedCard=-1,cardGameNameSpace.whoCanClick=cardGameNameSpace.currentOpponent);else if("x"!=d){var t=!1;cardGameNameSpace.cards[d].hasBeenPlaced||cardGameNameSpace.cards[d].currentOwner==cardGameNameSpace.whoCanClick&&(t=!0),cardGameNameSpace.isPlayer1AI&&1==cardGameNameSpace.whoCanClick&&(t=!1),t&&(cardGameNameSpace.currentlySelectedCard=d)}}},findBestMove:function(a,e){var r=1==e?2:1;listOfPossibleBestMoves=[[-999999,-1,-1,-1]];for(var c,m,d,t,s,o=2;o<cardGameNameSpace.boardWidth-2;o++)for(var p=0;p<cardGameNameSpace.boardHeight-0;p++)if("-"==a[p][o]&&cardGameNameSpace.isValidMove(o,p,a))for(var n=[],i=0;i<cardGameNameSpace.numberOfCardsInGame;i++)if(1==cardGameNameSpace.cards[i].currentOwner&&!cardGameNameSpace.cards[i].hasBeenPlaced&&-1==n.indexOf(Math.abs(cardGameNameSpace.cards[i].cardType))){n.push(Math.abs(cardGameNameSpace.cards[i].cardType));for(var S=[],G=0;G<cardGameNameSpace.numberOfCardsInGame;G++)S[G]={index:cardGameNameSpace.cards[G].index,originalOwner:cardGameNameSpace.cards[G].originalOwner,hasBeenPlaced:cardGameNameSpace.cards[G].hasBeenPlaced,cardType:cardGameNameSpace.cards[G].cardType,currentOwner:cardGameNameSpace.cards[G].currentOwner};for(var l=[],N=0;N<a.length;N++)l[N]=a[N].slice();l[p][o]=i,S[i].hasBeenPlaced=!0,thisMovesScore=0,cardGameNameSpace.checkAttacksInAllDirections(o,p,l,S,r,e,!0),c=1.01*thisMovesScore,m=0,d=[],t=r,s=e;for(var h=2;h<cardGameNameSpace.boardWidth-2;h++)for(N=0;N<cardGameNameSpace.boardHeight-0;N++)if("-"==l[N][h]&&cardGameNameSpace.isValidMove(h,N,l))for(var u=[],C=0;C<cardGameNameSpace.numberOfCardsInGame;C++)if(2==S[C].currentOwner&&!S[C].hasBeenPlaced&&-1==u.indexOf(Math.abs(S[C].cardType))){u.push(Math.abs(S[C].cardType));var g=[];for(G=0;G<cardGameNameSpace.numberOfCardsInGame;G++)g[G]={index:S[G].index,originalOwner:S[G].originalOwner,hasBeenPlaced:S[G].hasBeenPlaced,cardType:S[G].cardType,currentOwner:S[G].currentOwner};var f=[];for(G=0;G<l.length;G++)f[G]=l[G].slice();f[N][h]=C,g[C].hasBeenPlaced=!0,thisMovesScore=0,cardGameNameSpace.checkAttacksInAllDirections(h,N,f,g,s,t,!0),thisMovesScore>m?(m=thisMovesScore,d=[h+","+N]):thisMovesScore==m&&d.push(h+","+N)}thisMovesScore=c-m,(listOfPossibleBestMoves=cardGameNameSpace.insertNewMove([thisMovesScore,i,o,p],listOfPossibleBestMoves)).length>10&&listOfPossibleBestMoves.pop()}-999999==listOfPossibleBestMoves[listOfPossibleBestMoves.length-1][0]&&listOfPossibleBestMoves.pop();for(var v=0;v<listOfPossibleBestMoves.length;v++){var b=listOfPossibleBestMoves[v][2]+","+listOfPossibleBestMoves[v][3];-1!=d.indexOf(b)&&(listOfPossibleBestMoves[v][0]+=.001)}listOfPossibleBestMoves.sort(sortByHighestValue);var y=listOfPossibleBestMoves[indexToCheck=0][0];cardGameNameSpace.thisGroupsScore=[],indexesToRemove=[];do{var x=listOfPossibleBestMoves[indexToCheck][0];x==y?cardGameNameSpace.thisGroupsScore.push(indexToCheck):cardGameNameSpace.findLowestScoreInGroup(),y=x,indexToCheck++}while(indexToCheck<listOfPossibleBestMoves.length);cardGameNameSpace.thisGroupsScore.length==listOfPossibleBestMoves.length&&cardGameNameSpace.findLowestScoreInGroup();for(var I=indexesToRemove.length-1;I>=0;I--)listOfPossibleBestMoves.splice(indexesToRemove[I],1);var M=cardGameNameSpace.player1Skill,T=0;do{if(++T==listOfPossibleBestMoves.length)break}while(listOfPossibleBestMoves[T][0]==listOfPossibleBestMoves[0][0]);T>M&&(M=T),M>listOfPossibleBestMoves.length&&(M=listOfPossibleBestMoves.length-1),whichMoveToMake=listOfPossibleBestMoves[Math.floor(Math.random()*M)]},insertNewMove:function(a,e){return e.splice(cardGameNameSpace.locationOfBestScores(a,e)+1,0,a),e},locationOfBestScores:function(a,e,r,c){r=r||0,c=c||e.length;var m=parseInt(r+(c-r)/2,10);return e[m][0]===a[0]?m:c-r<=1?e[m][0]<a[0]?m-1:m:e[m][0]>a[0]?cardGameNameSpace.locationOfBestScores(a,e,m,c):cardGameNameSpace.locationOfBestScores(a,e,r,m)},findLowestScoreInGroup:function(){for(var a=99999,e=0;e<cardGameNameSpace.thisGroupsScore.length;e++){var r=Math.abs(cardGameNameSpace.cards[listOfPossibleBestMoves[cardGameNameSpace.thisGroupsScore[e]][1]].cardType);(c=parseInt(cardGameNameSpace.allCardData[r][0])+parseInt(cardGameNameSpace.allCardData[r][1]))<a&&(a=c)}for(e=0;e<cardGameNameSpace.thisGroupsScore.length;e++){var c;r=Math.abs(cardGameNameSpace.cards[listOfPossibleBestMoves[cardGameNameSpace.thisGroupsScore[e]][1]].cardType);(c=parseInt(cardGameNameSpace.allCardData[r][0])+parseInt(cardGameNameSpace.allCardData[r][1]))!=a&&indexesToRemove.push(cardGameNameSpace.thisGroupsScore[e])}cardGameNameSpace.thisGroupsScore=[],cardGameNameSpace.thisGroupsScore.push(indexToCheck)},initCardGame:function(){cardGameNameSpace.getCanvasPosition(),cardGameNameSpace.gameCanvas=document.getElementById("cardGame"),cardGameNameSpace.gameCanvas.getContext&&(cardGameNameSpace.gameContext=cardGameNameSpace.gameCanvas.getContext("2d"),cardGameNameSpace.canvasWidth=cardGameNameSpace.gameCanvas.width,cardGameNameSpace.canvasHeight=cardGameNameSpace.gameCanvas.height),cardGameNameSpace.cards=[];for(var a=0;a<cardGameNameSpace.numberOfCardsInGame;a++)cardGameNameSpace.cards[a]={x:-100,y:-100,index:a,zIndex:0,flippedAnimation:0,animationSequence:0,isMovingToBoard:!1,originalOwner:a>=cardGameNameSpace.numberOfCardsInGame/2?2:1,hasBeenPlaced:!1,cardType:cardGameNameSpace.allCardsThisGame[a],currentOwner:a>=cardGameNameSpace.numberOfCardsInGame/2?2:1,draw:function(){var a=0,e=0;if(this.flippedAnimation>0){var r=4*this.flippedAnimation;a=getRandomIntegerInclusive(0,r),e=getRandomIntegerInclusive(0,r),this.flippedAnimation--,0==this.flippedAnimation&&(this.zIndex=0)}cardGameNameSpace.gameContext.fillStyle=cardGameNameSpace.playerColours[this.currentOwner],cardGameNameSpace.gameContext.fillRect(this.x+a,this.y+e,cardGameNameSpace.cardWidth,cardGameNameSpace.cardHeight),this.cardType>0?cardGameNameSpace.gameContext.drawImage(cardGameNameSpace.cardImages[this.cardType],this.x+a,this.y+e):(cardGameNameSpace.gameContext.drawImage(cardGameNameSpace.cardImages[this.cardType],cardGameNameSpace.cardWidth*Math.floor(this.animationSequence),0,cardGameNameSpace.cardWidth,cardGameNameSpace.cardHeight,this.x+a,this.y+e,cardGameNameSpace.cardWidth,cardGameNameSpace.cardHeight),this.animationSequence+=.1,this.animationSequence>cardGameNameSpace.maxCardAnimationFrames&&(this.animationSequence=0))}};cardGameNameSpace.cardImages=[];for(a=0;a<cardGameNameSpace.numberOfCardTypes;a++)cardGameNameSpace.cardImages[cardGameNameSpace.allCardsToLoadThisGame[a]]=Loader.getImage("card"+cardGameNameSpace.allCardsToLoadThisGame[a]);cardGameNameSpace.boardImage=Loader.getImage("board"),cardGameNameSpace.currentCardSelectedImage=Loader.getImage("selected"),cardGameNameSpace.currentCardSelected={draw:function(){-1!=cardGameNameSpace.currentlySelectedCard&&cardGameNameSpace.gameContext.drawImage(cardGameNameSpace.currentCardSelectedImage,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].x-20,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].y-20)}},cardGameNameSpace.currentPlayerMarkerImage=Loader.getImage("current"),cardGameNameSpace.currentPlayerMarker={xScale:1,increment:-.05,draw:function(){this.xScale+=this.increment,Math.abs(this.xScale)>1&&(this.increment*=-1),cardGameNameSpace.gameContext.save(),this.x=1==cardGameNameSpace.currentPlayersTurn?84:925,cardGameNameSpace.gameContext.translate(this.x,20),cardGameNameSpace.gameContext.scale(this.xScale,1),cardGameNameSpace.gameContext.drawImage(cardGameNameSpace.currentPlayerMarkerImage,0-cardGameNameSpace.currentPlayerMarkerImage.width/2,0),cardGameNameSpace.gameContext.restore()}},cardGameNameSpace.placeCardOnBoard(0,cardGameNameSpace.boardWidth/2-1,cardGameNameSpace.boardHeight/2-1,!0),cardGameNameSpace.placeCardOnBoard(1,cardGameNameSpace.boardWidth/2,cardGameNameSpace.boardHeight/2,!0),cardGameNameSpace.placeCardOnBoard(cardGameNameSpace.numberOfCardsInGame/2,cardGameNameSpace.boardWidth/2,cardGameNameSpace.boardHeight/2-1,!0),cardGameNameSpace.placeCardOnBoard(cardGameNameSpace.numberOfCardsInGame/2+1,cardGameNameSpace.boardWidth/2-1,cardGameNameSpace.boardHeight/2,!0),cardGameNameSpace.player1CardIndexToPlace=2,cardGameNameSpace.player2CardIndexToPlace=cardGameNameSpace.numberOfCardsInGame/2+2;for(var e=0;e<cardGameNameSpace.boardWidth;e++)for(var r=0;r<cardGameNameSpace.boardHeight;r++)"#"==cardGameNameSpace.board[r][e]?(cardGameNameSpace.placeCardOnBoard(cardGameNameSpace.player1CardIndexToPlace,e,r,!1),cardGameNameSpace.player1CardIndexToPlace++):"@"==cardGameNameSpace.board[r][e]&&(cardGameNameSpace.placeCardOnBoard(cardGameNameSpace.player2CardIndexToPlace,e,r,!1),cardGameNameSpace.player2CardIndexToPlace++);cardGameNameSpace.placedCards=4,cardGameNameSpace.currentlySelectedCard=-1,cardGameNameSpace.currentOpponent=1,cardGameNameSpace.isPlayer1AI=!0,cardGameNameSpace.aiIsWorking=-1,cardGameNameSpace.waitForDrawUpdate=!1,isCardGameANetworkGame?cardGameNameSpace.isPlayer1AI=!1:(cardGameNameSpace.currentPlayersTurn=getRandomIntegerInclusive(1,2),cardGameNameSpace.whoCanClick=cardGameNameSpace.currentPlayersTurn,cardGameNameSpace.gameMode="play","undefined"!=typeof gameMode&&(gameMode="cardGame"),1==cardGameNameSpace.currentPlayersTurn&&(cardGameNameSpace.currentOpponent=2,cardGameNameSpace.isPlayer1AI&&cardGameNameSpace.doAIMove()))},draw:function(){cardGameNameSpace.gameContext.drawImage(cardGameNameSpace.boardImage,0,0);for(var a=cardGameNameSpace.cards.slice().sort(cardGameNameSpace.compareZIndex),e=0;e<cardGameNameSpace.numberOfCardsInGame;e++)cardGameNameSpace.cards[a[e].index].draw();cardGameNameSpace.currentCardSelected.draw(),cardGameNameSpace.currentPlayerMarker.draw()},isValidMove:function(a,e,r){for(var c=!1,m=a-1;m<=a+1;m++)for(var d=e-1;d<=e+1;d++)d>=0&&d<cardGameNameSpace.boardHeight&&(isNaN(r[d][m])||(c=!0));return c},update:function(){cardGameNameSpace.waitForDrawUpdate&&(cardGameNameSpace.doAIMove(),cardGameNameSpace.waitForDrawUpdate=!1);for(var a=0;a<cardGameNameSpace.numberOfCardsInGame;a++)if(cardGameNameSpace.cards[a].isMovingToBoard){var e=cardGameNameSpace.cards[a].gridX*cardGameNameSpace.cardWidth,r=cardGameNameSpace.cards[a].gridY*cardGameNameSpace.cardHeight;if(cardGameNameSpace.cards[a].x-=.3*(cardGameNameSpace.cards[a].x-e),cardGameNameSpace.cards[a].y-=.3*(cardGameNameSpace.cards[a].y-r),Math.abs(cardGameNameSpace.cards[a].x-e)<10&&Math.abs(cardGameNameSpace.cards[a].y-r)<10){if(cardGameNameSpace.cards[a].isMovingToBoard=!1,cardGameNameSpace.cards[a].x=cardGameNameSpace.cards[a].gridX*cardGameNameSpace.cardWidth,cardGameNameSpace.cards[a].y=cardGameNameSpace.cards[a].gridY*cardGameNameSpace.cardHeight,cardGameNameSpace.cards[a].hasBeenPlaced=!0,cardGameNameSpace.cards[a].zIndex=0,cardGameNameSpace.checkAttacksInAllDirections(cardGameNameSpace.cards[a].gridX,cardGameNameSpace.cards[a].gridY,cardGameNameSpace.board,cardGameNameSpace.cards,cardGameNameSpace.currentOpponent,cardGameNameSpace.currentPlayersTurn,!1),cardGameNameSpace.placedCards++,cardGameNameSpace.placedCards==cardGameNameSpace.numberOfCardsInGame){cardGameNameSpace.gameMode="gameover";for(var c=0,m=0,d=0;d<cardGameNameSpace.numberOfCardsInGame;d++)1==cardGameNameSpace.cards[d].currentOwner?c++:m++;m>c?(cardGameNameSpace.playerColours[1]="#665200",cardGamePlayer2Wins()):c>m?(cardGameNameSpace.playerColours[2]="#660052",cardGamePlayer1Wins()):cardGameIsDrawn(),cardGameNameSpace.draw()}cardGameNameSpace.oldCurrentPlayersTurn=cardGameNameSpace.currentPlayersTurn,cardGameNameSpace.currentPlayersTurn=cardGameNameSpace.currentOpponent,cardGameNameSpace.currentOpponent=cardGameNameSpace.oldCurrentPlayersTurn,1==cardGameNameSpace.currentPlayersTurn&&cardGameNameSpace.isPlayer1AI&&(cardGameNameSpace.waitForDrawUpdate=!0)}}cardGameNameSpace.aiIsWorking>0&&(cardGameNameSpace.aiIsWorking++,cardGameNameSpace.aiIsWorking>36&&(cardGameNameSpace.aiIsWorking=-1,cardGameNameSpace.currentlySelectedCard=whichMoveToMake[1],cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].isMovingToBoard=!0,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].gridX=whichMoveToMake[2],cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].gridY=whichMoveToMake[3],cardGameNameSpace.board[whichMoveToMake[3]][whichMoveToMake[2]]=cardGameNameSpace.currentlySelectedCard,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].zIndex=1,cardGameNameSpace.currentlySelectedCard=-1,cardGameNameSpace.whoCanClick=2))},doAIMove:function(){cardGameNameSpace.aiIsWorking=1,cardGameNameSpace.findBestMove(cardGameNameSpace.board,cardGameNameSpace.currentPlayersTurn,cardGameNameSpace.cards)}};