function loadingProgress(){console.log("loading - "+Loader.getProgress())}function checkAttacksInAllDirections(e,a,r,s,o,t,c){checkAttack(e,a,-1,0,r,s,o,t,c),checkAttack(e,a,1,0,r,s,o,t,c),checkAttack(e,a,0,-1,r,s,o,t,c),checkAttack(e,a,0,1,r,s,o,t,c),checkAttack(e,a,-1,-1,r,s,o,t,c),checkAttack(e,a,1,1,r,s,o,t,c),checkAttack(e,a,-1,1,r,s,o,t,c),checkAttack(e,a,1,-1,r,s,o,t,c)}function checkAttack(e,a,r,s,o,t,c,i,n){var l=0,d=[],m=e+r,p=a+s;do{var h=!1;if(p>=0&&p<cardGameNameSpace.boardHeight){var v=o[p][m];if(!isNaN(v)&&t[v].currentOwner==c){h=!0,d.push(v);var S=t[v].cardType;l+=parseInt(cardGameNameSpace.allCardData[S][1]),m+=r,p+=s}}}while(h);var f=t[o[a][e]].cardType;if(cardGameNameSpace.placedCardsAttack=parseInt(cardGameNameSpace.allCardData[f][0]),p>=0&&p<cardGameNameSpace.boardHeight&&!isNaN(o[p][m])&&t[o[p][m]].currentOwner==i){var u=t[o[p][m]].cardType,G=parseInt(cardGameNameSpace.allCardData[u][0]);if(cardGameNameSpace.placedCardsAttack+G>=l)if(n){thisMovesScore+=d.length;for(var O=0;O<d.length;O++)t[d[O]].currentOwner=i}else for(var O=0;O<d.length;O++)flipCard(d[O],t,i)}}function flipCard(e,a,r){a[e].currentOwner=r,a[e].flippedAnimation=10,a[e].zIndex=1}function insertNewMove(e,a){return a.splice(locationOfBestScores(e,a)+1,0,e),a}function locationOfBestScores(e,a,r,s){r=r||0,s=s||a.length;var o=parseInt(r+(s-r)/2,10);return a[o][0]===e[0]?o:1>=s-r?a[o][0]<e[0]?o-1:o:a[o][0]>e[0]?locationOfBestScores(e,a,o,s):locationOfBestScores(e,a,r,o)}function findLowestScoreInGroup(){for(var e=99999,a=0;a<thisGroupsScore.length;a++){var r=cardGameNameSpace.cards[listOfPossibleBestMoves[thisGroupsScore[a]][1]].cardType,s=parseInt(cardGameNameSpace.allCardData[r][0])+parseInt(cardGameNameSpace.allCardData[r][1]);e>s&&(e=s)}for(var a=0;a<thisGroupsScore.length;a++){var r=cardGameNameSpace.cards[listOfPossibleBestMoves[thisGroupsScore[a]][1]].cardType,s=parseInt(cardGameNameSpace.allCardData[r][0])+parseInt(cardGameNameSpace.allCardData[r][1]);s!=e&&indexesToRemove.push(thisGroupsScore[a])}thisGroupsScore=[],thisGroupsScore.push(indexToCheck)}function findBestMove(e,a){whichOpponentCurrently=1==a?2:1,listOfPossibleBestMoves=[[-999999,-1,-1,-1]];for(var r=2,s=0,o=r;o<cardGameNameSpace.boardWidth-r;o++)for(var t=s;t<cardGameNameSpace.boardHeight-s;t++)if("-"==e[t][o]&&cardGameNameSpace.isValidMove(o,t,e))for(var c=[],i=0;i<cardGameNameSpace.numberOfCardsInGame;i++)if(1==cardGameNameSpace.cards[i].currentOwner&&!cardGameNameSpace.cards[i].hasBeenPlaced&&-1==c.indexOf(cardGameNameSpace.cards[i].cardType)){c.push(cardGameNameSpace.cards[i].cardType);for(var n=[],l=0;l<cardGameNameSpace.numberOfCardsInGame;l++)n[l]={index:cardGameNameSpace.cards[l].index,originalOwner:cardGameNameSpace.cards[l].originalOwner,hasBeenPlaced:cardGameNameSpace.cards[l].hasBeenPlaced,cardType:cardGameNameSpace.cards[l].cardType,currentOwner:cardGameNameSpace.cards[l].currentOwner};for(var d=[],m=0;m<e.length;m++)d[m]=e[m].slice();d[t][o]=i,n[i].hasBeenPlaced=!0,thisMovesScore=0,checkAttacksInAllDirections(o,t,d,n,whichOpponentCurrently,a,!0),AIScore=1.01*thisMovesScore,bestCounterMove=0,bestCounterMovePositions=[],whichCounterPlayerCurrently=whichOpponentCurrently,whichCounterOpponentCurrently=a;for(var p=r;p<cardGameNameSpace.boardWidth-r;p++)for(var m=s;m<cardGameNameSpace.boardHeight-s;m++)if("-"==d[m][p]&&cardGameNameSpace.isValidMove(p,m,d))for(var h=[],v=0;v<cardGameNameSpace.numberOfCardsInGame;v++)if(2==n[v].currentOwner&&!n[v].hasBeenPlaced&&-1==h.indexOf(n[v].cardType)){h.push(n[v].cardType);for(var S=[],l=0;l<cardGameNameSpace.numberOfCardsInGame;l++)S[l]={index:n[l].index,originalOwner:n[l].originalOwner,hasBeenPlaced:n[l].hasBeenPlaced,cardType:n[l].cardType,currentOwner:n[l].currentOwner};for(var f=[],l=0;l<d.length;l++)f[l]=d[l].slice();f[m][p]=v,S[v].hasBeenPlaced=!0,thisMovesScore=0,checkAttacksInAllDirections(p,m,f,S,whichCounterOpponentCurrently,whichCounterPlayerCurrently,!0),thisMovesScore>bestCounterMove?(bestCounterMove=thisMovesScore,bestCounterMovePositions=[p+","+m]):thisMovesScore==bestCounterMove&&bestCounterMovePositions.push(p+","+m)}thisMovesScore=AIScore-bestCounterMove,listOfPossibleBestMoves=insertNewMove([thisMovesScore,i,o,t],listOfPossibleBestMoves),listOfPossibleBestMoves.length>10&&listOfPossibleBestMoves.pop()}-999999==listOfPossibleBestMoves[listOfPossibleBestMoves.length-1][0]&&listOfPossibleBestMoves.pop();for(var u=0;u<listOfPossibleBestMoves.length;u++){var G=listOfPossibleBestMoves[u][2]+","+listOfPossibleBestMoves[u][3];-1!=bestCounterMovePositions.indexOf(G)&&(listOfPossibleBestMoves[u][0]+=.001)}listOfPossibleBestMoves.sort(sortByHighestValue),indexToCheck=0;var O=listOfPossibleBestMoves[indexToCheck][0];thisGroupsScore=[],indexesToRemove=[];do{var M=listOfPossibleBestMoves[indexToCheck][0];M==O?thisGroupsScore.push(indexToCheck):findLowestScoreInGroup(),O=M,indexToCheck++}while(indexToCheck<listOfPossibleBestMoves.length);thisGroupsScore.length==listOfPossibleBestMoves.length&&findLowestScoreInGroup();for(var C=indexesToRemove.length-1;C>=0;C--)listOfPossibleBestMoves.splice(indexesToRemove[C],1);console.log(listOfPossibleBestMoves);var b=cardGameNameSpace.player1Skill,N=0;do if(N++,N==listOfPossibleBestMoves.length)break;while(listOfPossibleBestMoves[N][0]==listOfPossibleBestMoves[0][0]);N>b&&(b=N),b>listOfPossibleBestMoves.length&&(b=listOfPossibleBestMoves.length-1),whichMoveToMake=listOfPossibleBestMoves[Math.floor(Math.random()*b)]}function gameLoop(){switch(window.requestAnimationFrame(gameLoop),cardGameNameSpace.gameMode){case"loading":console.log("loading...");break;case"play":var e=window.performance.now(),a=e-lastTime;lastTime=e,timeSinceLastFrameSwap+=a,timeSinceLastFrameSwap>animationUpdateTime&&(cardGameNameSpace.update(),cardGameNameSpace.draw(),timeSinceLastFrameSwap=0);break;case"gameover":console.log("game over")}}var lastTime=0,elapsed=0,timeSinceLastFrameSwap=0,animationFramesPerSecond=16,animationUpdateTime=1e3/animationFramesPerSecond;cardGameNameSpace.allCardData=allCardData,cardGameNameSpace.player1Cards=player1Cards,cardGameNameSpace.player2Cards=player2Cards,cardGameNameSpace.player1Skill=player1Skill,cutsTheMustard&&supportsCanvas()&&(cardGameNameSpace.initialiseCardGame(),gameLoop(),Loader.preload(cardGameNameSpace.imagesToLoad,cardGameNameSpace.initCardGame,loadingProgress),canvasResizeHandler=debounce(function(){cardGameNameSpace.getCanvasPosition()},250),window.addEventListener("resize",canvasResizeHandler));