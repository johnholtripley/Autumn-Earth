function loadingProgress(){console.log("loading - "+Loader.getProgress())}function update(){cardGameNameSpace.waitForDrawUpdate&&(doAIMove(),cardGameNameSpace.waitForDrawUpdate=!1);for(var e=0;e<cardGameNameSpace.numberOfCardsInGame;e++)if(cardGameNameSpace.cards[e].isMovingToBoard){var a=cardGameNameSpace.cards[e].gridX*cardGameNameSpace.cardWidth,r=cardGameNameSpace.cards[e].gridY*cardGameNameSpace.cardHeight;if(cardGameNameSpace.cards[e].x-=.3*(cardGameNameSpace.cards[e].x-a),cardGameNameSpace.cards[e].y-=.3*(cardGameNameSpace.cards[e].y-r),Math.abs(cardGameNameSpace.cards[e].x-a)<10&&Math.abs(cardGameNameSpace.cards[e].y-r)<10){if(cardGameNameSpace.cards[e].isMovingToBoard=!1,cardGameNameSpace.cards[e].x=cardGameNameSpace.cards[e].gridX*cardGameNameSpace.cardWidth,cardGameNameSpace.cards[e].y=cardGameNameSpace.cards[e].gridY*cardGameNameSpace.cardHeight,cardGameNameSpace.cards[e].hasBeenPlaced=!0,cardGameNameSpace.cards[e].zIndex=0,checkAttacksInAllDirections(cardGameNameSpace.cards[e].gridX,cardGameNameSpace.cards[e].gridY,cardGameNameSpace.board,cardGameNameSpace.cards,cardGameNameSpace.currentOpponent,cardGameNameSpace.currentPlayersTurn,!1),cardGameNameSpace.placedCards++,cardGameNameSpace.placedCards==cardGameNameSpace.numberOfCardsInGame){cardGameNameSpace.gameMode="gameover";for(var c=0,d=0,s=0;s<cardGameNameSpace.numberOfCardsInGame;s++)1==cardGameNameSpace.cards[s].currentOwner?c++:d++;d>c?cardGameNameSpace.playerColours[1]="#665200":c>d&&(cardGameNameSpace.playerColours[2]="#660052"),draw()}cardGameNameSpace.oldCurrentPlayersTurn=cardGameNameSpace.currentPlayersTurn,cardGameNameSpace.currentPlayersTurn=cardGameNameSpace.currentOpponent,cardGameNameSpace.currentOpponent=cardGameNameSpace.oldCurrentPlayersTurn,1==cardGameNameSpace.currentPlayersTurn&&cardGameNameSpace.isPlayer1AI&&(cardGameNameSpace.waitForDrawUpdate=!0)}}cardGameNameSpace.aiIsWorking>0&&(cardGameNameSpace.aiIsWorking++,cardGameNameSpace.aiIsWorking>36&&(cardGameNameSpace.aiIsWorking=-1,cardGameNameSpace.currentlySelectedCard=whichMoveToMake[1],cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].isMovingToBoard=!0,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].gridX=whichMoveToMake[2],cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].gridY=whichMoveToMake[3],cardGameNameSpace.board[whichMoveToMake[3]][whichMoveToMake[2]]=cardGameNameSpace.currentlySelectedCard,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].zIndex=1,cardGameNameSpace.currentlySelectedCard=-1,cardGameNameSpace.whoCanClick=2))}function isValidMove(e,a,r){for(var c=!1,d=e-1;e+1>=d;d++)for(var s=a-1;a+1>=s;s++)s>=0&&s<cardGameNameSpace.boardHeight&&(isNaN(r[s][d])||(c=!0));return c}function checkAttacksInAllDirections(e,a,r,c,d,s,o){checkAttack(e,a,-1,0,r,c,d,s,o),checkAttack(e,a,1,0,r,c,d,s,o),checkAttack(e,a,0,-1,r,c,d,s,o),checkAttack(e,a,0,1,r,c,d,s,o),checkAttack(e,a,-1,-1,r,c,d,s,o),checkAttack(e,a,1,1,r,c,d,s,o),checkAttack(e,a,-1,1,r,c,d,s,o),checkAttack(e,a,1,-1,r,c,d,s,o)}function checkAttack(e,a,r,c,d,s,o,t,m){var i=0,n=[],l=e+r,p=a+c;do{var S=!1;if(p>=0&&p<cardGameNameSpace.boardHeight){var G=d[p][l];if(!isNaN(G)&&s[G].currentOwner==o){S=!0,n.push(G);var N=s[G].cardType;i+=parseInt(cardGameNameSpace.allCardData[N][1]),l+=r,p+=c}}}while(S);var h=s[d[a][e]].cardType;if(cardGameNameSpace.placedCardsAttack=parseInt(cardGameNameSpace.allCardData[h][0]),p>=0&&p<cardGameNameSpace.boardHeight&&!isNaN(d[p][l])&&s[d[p][l]].currentOwner==t){var u=s[d[p][l]].cardType,v=parseInt(cardGameNameSpace.allCardData[u][0]);if(cardGameNameSpace.placedCardsAttack+v>=i)if(m){thisMovesScore+=n.length;for(var f=0;f<n.length;f++)s[n[f]].currentOwner=t}else for(var f=0;f<n.length;f++)flipCard(n[f],s,t)}}function flipCard(e,a,r){a[e].currentOwner=r,a[e].flippedAnimation=10,a[e].zIndex=1}function insertNewMove(e,a){return a.splice(locationOfBestScores(e,a)+1,0,e),a}function locationOfBestScores(e,a,r,c){r=r||0,c=c||a.length;var d=parseInt(r+(c-r)/2,10);return a[d][0]===e[0]?d:1>=c-r?a[d][0]<e[0]?d-1:d:a[d][0]>e[0]?locationOfBestScores(e,a,d,c):locationOfBestScores(e,a,r,d)}function findLowestScoreInGroup(){for(var e=99999,a=0;a<thisGroupsScore.length;a++){var r=cardGameNameSpace.cards[listOfPossibleBestMoves[thisGroupsScore[a]][1]].cardType,c=parseInt(cardGameNameSpace.allCardData[r][0])+parseInt(cardGameNameSpace.allCardData[r][1]);e>c&&(e=c)}for(var a=0;a<thisGroupsScore.length;a++){var r=cardGameNameSpace.cards[listOfPossibleBestMoves[thisGroupsScore[a]][1]].cardType,c=parseInt(cardGameNameSpace.allCardData[r][0])+parseInt(cardGameNameSpace.allCardData[r][1]);c!=e&&indexesToRemove.push(thisGroupsScore[a])}thisGroupsScore=[],thisGroupsScore.push(indexToCheck)}function doAIMove(){console.log("AI thinking..."),cardGameNameSpace.aiIsWorking=1,findBestMove(cardGameNameSpace.board,cardGameNameSpace.currentPlayersTurn,cardGameNameSpace.cards)}function findBestMove(e,a){whichOpponentCurrently=1==a?2:1,listOfPossibleBestMoves=[[-999999,-1,-1,-1]];for(var r=2,c=0,d=r;d<cardGameNameSpace.boardWidth-r;d++)for(var s=c;s<cardGameNameSpace.boardHeight-c;s++)if("-"==e[s][d]&&isValidMove(d,s,e))for(var o=[],t=0;t<cardGameNameSpace.numberOfCardsInGame;t++)if(1==cardGameNameSpace.cards[t].currentOwner&&!cardGameNameSpace.cards[t].hasBeenPlaced&&-1==o.indexOf(cardGameNameSpace.cards[t].cardType)){o.push(cardGameNameSpace.cards[t].cardType);for(var m=[],i=0;i<cardGameNameSpace.numberOfCardsInGame;i++)m[i]={index:cardGameNameSpace.cards[i].index,originalOwner:cardGameNameSpace.cards[i].originalOwner,hasBeenPlaced:cardGameNameSpace.cards[i].hasBeenPlaced,cardType:cardGameNameSpace.cards[i].cardType,currentOwner:cardGameNameSpace.cards[i].currentOwner};for(var n=[],l=0;l<e.length;l++)n[l]=e[l].slice();n[s][d]=t,m[t].hasBeenPlaced=!0,thisMovesScore=0,checkAttacksInAllDirections(d,s,n,m,whichOpponentCurrently,a,!0),AIScore=1.01*thisMovesScore,bestCounterMove=0,bestCounterMovePositions=[],whichCounterPlayerCurrently=whichOpponentCurrently,whichCounterOpponentCurrently=a;for(var p=r;p<cardGameNameSpace.boardWidth-r;p++)for(var l=c;l<cardGameNameSpace.boardHeight-c;l++)if("-"==n[l][p]&&isValidMove(p,l,n))for(var S=[],G=0;G<cardGameNameSpace.numberOfCardsInGame;G++)if(2==m[G].currentOwner&&!m[G].hasBeenPlaced&&-1==S.indexOf(m[G].cardType)){S.push(m[G].cardType);for(var N=[],i=0;i<cardGameNameSpace.numberOfCardsInGame;i++)N[i]={index:m[i].index,originalOwner:m[i].originalOwner,hasBeenPlaced:m[i].hasBeenPlaced,cardType:m[i].cardType,currentOwner:m[i].currentOwner};for(var h=[],i=0;i<n.length;i++)h[i]=n[i].slice();h[l][p]=G,N[G].hasBeenPlaced=!0,thisMovesScore=0,checkAttacksInAllDirections(p,l,h,N,whichCounterOpponentCurrently,whichCounterPlayerCurrently,!0),thisMovesScore>bestCounterMove?(bestCounterMove=thisMovesScore,bestCounterMovePositions=[p+","+l]):thisMovesScore==bestCounterMove&&bestCounterMovePositions.push(p+","+l)}thisMovesScore=AIScore-bestCounterMove,listOfPossibleBestMoves=insertNewMove([thisMovesScore,t,d,s],listOfPossibleBestMoves),listOfPossibleBestMoves.length>10&&listOfPossibleBestMoves.pop()}-999999==listOfPossibleBestMoves[listOfPossibleBestMoves.length-1][0]&&listOfPossibleBestMoves.pop();for(var u=0;u<listOfPossibleBestMoves.length;u++){var v=listOfPossibleBestMoves[u][2]+","+listOfPossibleBestMoves[u][3];-1!=bestCounterMovePositions.indexOf(v)&&(listOfPossibleBestMoves[u][0]+=.001)}listOfPossibleBestMoves.sort(sortByHighestValue),indexToCheck=0;var f=listOfPossibleBestMoves[indexToCheck][0];thisGroupsScore=[],indexesToRemove=[];do{var C=listOfPossibleBestMoves[indexToCheck][0];C==f?thisGroupsScore.push(indexToCheck):findLowestScoreInGroup(),f=C,indexToCheck++}while(indexToCheck<listOfPossibleBestMoves.length);thisGroupsScore.length==listOfPossibleBestMoves.length&&findLowestScoreInGroup();for(var g=indexesToRemove.length-1;g>=0;g--)listOfPossibleBestMoves.splice(indexesToRemove[g],1);console.log(listOfPossibleBestMoves);var M=cardGameNameSpace.player2Skill,b=0;do if(b++,b==listOfPossibleBestMoves.length)break;while(listOfPossibleBestMoves[b][0]==listOfPossibleBestMoves[0][0]);b>M&&(M=b),M>listOfPossibleBestMoves.length&&(M=listOfPossibleBestMoves.length-1),whichMoveToMake=listOfPossibleBestMoves[Math.floor(Math.random()*M)]}function canvasClick(e){var a=e.clientX+document.body.scrollLeft+document.documentElement.scrollLeft-cardGameNameSpace.outerCanvasLeft,r=e.clientY+document.body.scrollTop+document.documentElement.scrollTop-cardGameNameSpace.outerCanvasTop-cardGameNameSpace.pageLoadScroll;switch(cardGameNameSpace.gameMode){case"play":gridX=Math.floor(a/cardGameNameSpace.outerCanvasWidth*cardGameNameSpace.boardWidth),gridY=Math.floor(r/cardGameNameSpace.outerCanvasHeight*cardGameNameSpace.boardHeight);var c=cardGameNameSpace.board[gridY][gridX];if("-"==c)-1!=cardGameNameSpace.currentlySelectedCard&&isValidMove(gridX,gridY,cardGameNameSpace.board)&&(cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].isMovingToBoard=!0,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].gridX=gridX,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].gridY=gridY,cardGameNameSpace.board[gridY][gridX]=cardGameNameSpace.currentlySelectedCard,cardGameNameSpace.cards[cardGameNameSpace.currentlySelectedCard].zIndex=1,cardGameNameSpace.currentlySelectedCard=-1,cardGameNameSpace.whoCanClick=cardGameNameSpace.currentOpponent);else if("x"!=c){var d=!1;cardGameNameSpace.cards[c].hasBeenPlaced||cardGameNameSpace.cards[c].currentOwner==cardGameNameSpace.whoCanClick&&(d=!0),cardGameNameSpace.isPlayer1AI&&1==cardGameNameSpace.whoCanClick&&(d=!1),d&&(cardGameNameSpace.currentlySelectedCard=c)}}}function gameLoop(){switch(window.requestAnimationFrame(gameLoop),cardGameNameSpace.gameMode){case"loading":console.log("loading...");break;case"play":var e=window.performance.now(),a=e-lastTime;lastTime=e,timeSinceLastFrameSwap+=a,timeSinceLastFrameSwap>animationUpdateTime&&(update(),cardGameNameSpace.draw(),timeSinceLastFrameSwap=0);break;case"gameover":console.log("game over")}}var lastTime=0,elapsed=0,timeSinceLastFrameSwap=0,animationFramesPerSecond=16,animationUpdateTime=1e3/animationFramesPerSecond;cardGameNameSpace.allCardData=allCardData,cardGameNameSpace.player1Cards=player1Cards,cardGameNameSpace.player2Cards=player2Cards,cardGameNameSpace.player2Skill=player2Skill,cutsTheMustard&&supportsCanvas()&&(cardGameNameSpace.initialiseCardGame(),gameLoop(),Loader.preload(cardGameNameSpace.imagesToLoad,cardGameNameSpace.initCardGame,loadingProgress),canvasResizeHandler=debounce(function(){cardGameNameSpace.getCanvasPosition()},250),window.addEventListener("resize",canvasResizeHandler));