function loadingProgress(){console.log("loading - "+Loader.getProgress())}function getCanvasPosition(){canvasElemCoords=document.getElementById("cardGame").getBoundingClientRect(),outerCanvasLeft=canvasElemCoords.left,outerCanvasTop=canvasElemCoords.top,outerCanvasWidth=canvasElemCoords.right-canvasElemCoords.left,outerCanvasHeight=canvasElemCoords.bottom-canvasElemCoords.top,pageLoadScroll=document.body.scrollTop+document.documentElement.scrollTop}function initCardGame(){getCanvasPosition(),gameCanvas=document.getElementById("cardGame"),gameCanvas.getContext&&(gameContext=gameCanvas.getContext("2d"),canvasWidth=gameCanvas.width,canvasHeight=gameCanvas.height),cards=[];for(var e=0;e<cardGameNameSpace.numberOfCardsInGame;e++)cards[e]={x:-100,y:-100,index:e,zIndex:0,flippedAnimation:0,isMovingToBoard:!1,originalOwner:e>=cardGameNameSpace.numberOfCardsInGame/2?2:1,hasBeenPlaced:!1,cardType:cardGameNameSpace.allCardsThisGame[e],currentOwner:e>=cardGameNameSpace.numberOfCardsInGame/2?2:1,draw:function(){offsetX=0,offsetY=0,this.flippedAnimation>0&&(randomAmount=4*this.flippedAnimation,offsetX=getRandomIntegerInclusive(0,randomAmount),offsetY=getRandomIntegerInclusive(0,randomAmount),this.flippedAnimation--,0==this.flippedAnimation&&(this.zIndex=0)),gameContext.fillStyle=cardGameNameSpace.playerColours[this.currentOwner],gameContext.fillRect(this.x+offsetX,this.y+offsetY,cardGameNameSpace.cardWidth,cardGameNameSpace.cardHeight),gameContext.drawImage(cardImages[this.cardType],this.x+offsetX,this.y+offsetY)}};cardImages=[];for(var e=1;numberOfCardTypes>=e;e++)cardImages[e]=Loader.getImage("card"+e);boardImage=Loader.getImage("board"),currentCardSelectedImage=Loader.getImage("selected"),currentCardSelected={draw:function(){-1!=currentlySelectedCard&&gameContext.drawImage(currentCardSelectedImage,cards[currentlySelectedCard].x-20,cards[currentlySelectedCard].y-20)}},currentPlayerMarkerImage=Loader.getImage("current"),currentPlayerMarker={xScale:1,increment:-.05,draw:function(){this.xScale+=this.increment,Math.abs(this.xScale)>1&&(this.increment*=-1),gameContext.save(),this.x=1==currentPlayersTurn?84:925,gameContext.translate(this.x,20),gameContext.scale(this.xScale,1),gameContext.drawImage(currentPlayerMarkerImage,0-currentPlayerMarkerImage.width/2,0),gameContext.restore()}},placeCardOnBoard(0,cardGameNameSpace.boardWidth/2-1,cardGameNameSpace.boardHeight/2-1,!0),placeCardOnBoard(1,cardGameNameSpace.boardWidth/2,cardGameNameSpace.boardHeight/2,!0),placeCardOnBoard(cardGameNameSpace.numberOfCardsInGame/2,cardGameNameSpace.boardWidth/2,cardGameNameSpace.boardHeight/2-1,!0),placeCardOnBoard(cardGameNameSpace.numberOfCardsInGame/2+1,cardGameNameSpace.boardWidth/2-1,cardGameNameSpace.boardHeight/2,!0);for(var a=2,r=cardGameNameSpace.numberOfCardsInGame/2+2,c=0;c<cardGameNameSpace.boardWidth;c++)for(var t=0;t<cardGameNameSpace.boardHeight;t++)"#"==cardGameNameSpace.board[t][c]?(placeCardOnBoard(a,c,t,!1),a++):"@"==cardGameNameSpace.board[t][c]&&(placeCardOnBoard(r,c,t,!1),r++);placedCards=4,currentlySelectedCard=-1,currentOpponent=1,isPlayer1AI=!0,aiIsWorking=-1,waitForDrawUpdate=!1,isANetworkGame?isPlayer1AI=!1:(currentPlayersTurn=getRandomIntegerInclusive(1,2),whoCanClick=currentPlayersTurn,cardGameNameSpace.gameMode="play",1==currentPlayersTurn&&(currentOpponent=2,isPlayer1AI&&doAIMove()))}function placeCardOnBoard(e,a,r,c){cardGameNameSpace.board[r][a]=e,cards[e].x=a*cardGameNameSpace.cardWidth,cards[e].y=r*cardGameNameSpace.cardHeight,cards[e].hasBeenPlaced=c}function update(){waitForDrawUpdate&&(doAIMove(),waitForDrawUpdate=!1);for(var e=0;e<cardGameNameSpace.numberOfCardsInGame;e++)if(cards[e].isMovingToBoard){var a=cards[e].gridX*cardGameNameSpace.cardWidth,r=cards[e].gridY*cardGameNameSpace.cardHeight;if(cards[e].x-=.3*(cards[e].x-a),cards[e].y-=.3*(cards[e].y-r),Math.abs(cards[e].x-a)<10&&Math.abs(cards[e].y-r)<10){if(cards[e].isMovingToBoard=!1,cards[e].x=cards[e].gridX*cardGameNameSpace.cardWidth,cards[e].y=cards[e].gridY*cardGameNameSpace.cardHeight,cards[e].hasBeenPlaced=!0,cards[e].zIndex=0,checkAttacksInAllDirections(cards[e].gridX,cards[e].gridY,cardGameNameSpace.board,cards,currentOpponent,currentPlayersTurn,!1),placedCards++,placedCards==cardGameNameSpace.numberOfCardsInGame){cardGameNameSpace.gameMode="gameover";for(var c=0,t=0,o=0;o<cardGameNameSpace.numberOfCardsInGame;o++)1==cards[o].currentOwner?c++:t++;t>c?cardGameNameSpace.playerColours[1]="#665200":c>t&&(cardGameNameSpace.playerColours[2]="#660052"),draw()}var s=currentPlayersTurn;currentPlayersTurn=currentOpponent,currentOpponent=s,1==currentPlayersTurn&&isPlayer1AI&&(waitForDrawUpdate=!0)}}aiIsWorking>0&&(aiIsWorking++,aiIsWorking>36&&(aiIsWorking=-1,currentlySelectedCard=whichMoveToMake[1],cards[currentlySelectedCard].isMovingToBoard=!0,cards[currentlySelectedCard].gridX=whichMoveToMake[2],cards[currentlySelectedCard].gridY=whichMoveToMake[3],cardGameNameSpace.board[whichMoveToMake[3]][whichMoveToMake[2]]=currentlySelectedCard,cards[currentlySelectedCard].zIndex=1,currentlySelectedCard=-1,whoCanClick=2))}function draw(){gameContext.drawImage(boardImage,0,0);for(var e=cards.slice(),a=e.sort(cardGameNameSpace.compareZIndex),r=0;r<cardGameNameSpace.numberOfCardsInGame;r++)cards[a[r].index].draw();currentCardSelected.draw(),currentPlayerMarker.draw()}function isValidMove(e,a,r){for(var c=!1,t=e-1;e+1>=t;t++)for(var o=a-1;a+1>=o;o++)o>=0&&o<cardGameNameSpace.boardHeight&&(isNaN(r[o][t])||(c=!0));return c}function checkAttacksInAllDirections(e,a,r,c,t,o,s){checkAttack(e,a,-1,0,r,c,t,o,s),checkAttack(e,a,1,0,r,c,t,o,s),checkAttack(e,a,0,-1,r,c,t,o,s),checkAttack(e,a,0,1,r,c,t,o,s),checkAttack(e,a,-1,-1,r,c,t,o,s),checkAttack(e,a,1,1,r,c,t,o,s),checkAttack(e,a,-1,1,r,c,t,o,s),checkAttack(e,a,1,-1,r,c,t,o,s)}function checkAttack(e,a,r,c,t,o,s,d,n){var i=0,l=[],m=e+r,p=a+c;do{var u=!1;if(p>=0&&p<cardGameNameSpace.boardHeight){var h=t[p][m];if(!isNaN(h)&&o[h].currentOwner==s){u=!0,l.push(h);var f=o[h].cardType;i+=parseInt(cardGameNameSpace.allCardData[f][1]),m+=r,p+=c}}}while(u);var g=o[t[a][e]].cardType,v=parseInt(cardGameNameSpace.allCardData[g][0]);if(p>=0&&p<cardGameNameSpace.boardHeight&&!isNaN(t[p][m])&&o[t[p][m]].currentOwner==d){var C=o[t[p][m]].cardType,S=parseInt(cardGameNameSpace.allCardData[C][0]);if(v+S>=i)if(n){thisMovesScore+=l.length;for(var G=0;G<l.length;G++)o[l[G]].currentOwner=d}else for(var G=0;G<l.length;G++)flipCard(l[G],o,d)}}function flipCard(e,a,r){a[e].currentOwner=r,a[e].flippedAnimation=10,a[e].zIndex=1}function insertNewMove(e,a){return a.splice(locationOfBestScores(e,a)+1,0,e),a}function locationOfBestScores(e,a,r,c){r=r||0,c=c||a.length;var t=parseInt(r+(c-r)/2,10);return a[t][0]===e[0]?t:1>=c-r?a[t][0]<e[0]?t-1:t:a[t][0]>e[0]?locationOfBestScores(e,a,t,c):locationOfBestScores(e,a,r,t)}function findLowestScoreInGroup(){for(var e=99999,a=0;a<thisGroupsScore.length;a++){var r=cards[listOfPossibleBestMoves[thisGroupsScore[a]][1]].cardType,c=parseInt(cardGameNameSpace.allCardData[r][0])+parseInt(cardGameNameSpace.allCardData[r][1]);e>c&&(e=c)}for(var a=0;a<thisGroupsScore.length;a++){var r=cards[listOfPossibleBestMoves[thisGroupsScore[a]][1]].cardType,c=parseInt(cardGameNameSpace.allCardData[r][0])+parseInt(cardGameNameSpace.allCardData[r][1]);c!=e&&indexesToRemove.push(thisGroupsScore[a])}thisGroupsScore=[],thisGroupsScore.push(indexToCheck)}function doAIMove(){console.log("AI thinking..."),aiIsWorking=1,findBestMove(cardGameNameSpace.board,currentPlayersTurn,cards)}function findBestMove(e,a){whichOpponentCurrently=1==a?2:1,listOfPossibleBestMoves=[[-999999,-1,-1,-1]];for(var r=2,c=0,t=r;t<cardGameNameSpace.boardWidth-r;t++)for(var o=c;o<cardGameNameSpace.boardHeight-c;o++)if("-"==e[o][t]&&isValidMove(t,o,e))for(var s=[],d=0;d<cardGameNameSpace.numberOfCardsInGame;d++)if(1==cards[d].currentOwner&&!cards[d].hasBeenPlaced&&-1==s.indexOf(cards[d].cardType)){s.push(cards[d].cardType);for(var n=[],i=0;i<cardGameNameSpace.numberOfCardsInGame;i++)n[i]={index:cards[i].index,originalOwner:cards[i].originalOwner,hasBeenPlaced:cards[i].hasBeenPlaced,cardType:cards[i].cardType,currentOwner:cards[i].currentOwner};for(var l=[],m=0;m<e.length;m++)l[m]=e[m].slice();l[o][t]=d,n[d].hasBeenPlaced=!0,thisMovesScore=0,checkAttacksInAllDirections(t,o,l,n,whichOpponentCurrently,a,!0),AIScore=1.01*thisMovesScore,bestCounterMove=0,bestCounterMovePositions=[],whichCounterPlayerCurrently=whichOpponentCurrently,whichCounterOpponentCurrently=a;for(var p=r;p<cardGameNameSpace.boardWidth-r;p++)for(var m=c;m<cardGameNameSpace.boardHeight-c;m++)if("-"==l[m][p]&&isValidMove(p,m,l))for(var u=[],h=0;h<cardGameNameSpace.numberOfCardsInGame;h++)if(2==n[h].currentOwner&&!n[h].hasBeenPlaced&&-1==u.indexOf(n[h].cardType)){u.push(n[h].cardType);for(var f=[],i=0;i<cardGameNameSpace.numberOfCardsInGame;i++)f[i]={index:n[i].index,originalOwner:n[i].originalOwner,hasBeenPlaced:n[i].hasBeenPlaced,cardType:n[i].cardType,currentOwner:n[i].currentOwner};for(var g=[],i=0;i<l.length;i++)g[i]=l[i].slice();g[m][p]=h,f[h].hasBeenPlaced=!0,thisMovesScore=0,checkAttacksInAllDirections(p,m,g,f,whichCounterOpponentCurrently,whichCounterPlayerCurrently,!0),thisMovesScore>bestCounterMove?(bestCounterMove=thisMovesScore,bestCounterMovePositions=[p+","+m]):thisMovesScore==bestCounterMove&&bestCounterMovePositions.push(p+","+m)}thisMovesScore=AIScore-bestCounterMove,listOfPossibleBestMoves=insertNewMove([thisMovesScore,d,t,o],listOfPossibleBestMoves),listOfPossibleBestMoves.length>10&&listOfPossibleBestMoves.pop()}-999999==listOfPossibleBestMoves[listOfPossibleBestMoves.length-1][0]&&listOfPossibleBestMoves.pop();for(var v=0;v<listOfPossibleBestMoves.length;v++){var C=listOfPossibleBestMoves[v][2]+","+listOfPossibleBestMoves[v][3];-1!=bestCounterMovePositions.indexOf(C)&&(listOfPossibleBestMoves[v][0]+=.001)}listOfPossibleBestMoves.sort(sortByHighestValue),indexToCheck=0;var S=listOfPossibleBestMoves[indexToCheck][0];thisGroupsScore=[],indexesToRemove=[];do{var G=listOfPossibleBestMoves[indexToCheck][0];G==S?thisGroupsScore.push(indexToCheck):findLowestScoreInGroup(),S=G,indexToCheck++}while(indexToCheck<listOfPossibleBestMoves.length);thisGroupsScore.length==listOfPossibleBestMoves.length&&findLowestScoreInGroup();for(var b=indexesToRemove.length-1;b>=0;b--)listOfPossibleBestMoves.splice(indexesToRemove[b],1);console.log(listOfPossibleBestMoves);var y=cardGameNameSpace.player2Skill,M=0;do if(M++,M==listOfPossibleBestMoves.length)break;while(listOfPossibleBestMoves[M][0]==listOfPossibleBestMoves[0][0]);M>y&&(y=M),y>listOfPossibleBestMoves.length&&(y=listOfPossibleBestMoves.length-1),whichMoveToMake=listOfPossibleBestMoves[Math.floor(Math.random()*y)]}function canvasClick(e){var a=e.clientX+document.body.scrollLeft+document.documentElement.scrollLeft-outerCanvasLeft,r=e.clientY+document.body.scrollTop+document.documentElement.scrollTop-outerCanvasTop-pageLoadScroll;switch(cardGameNameSpace.gameMode){case"play":gridX=Math.floor(a/outerCanvasWidth*cardGameNameSpace.boardWidth),gridY=Math.floor(r/outerCanvasHeight*cardGameNameSpace.boardHeight);var c=cardGameNameSpace.board[gridY][gridX];if("-"==c)-1!=currentlySelectedCard&&isValidMove(gridX,gridY,cardGameNameSpace.board)&&(cards[currentlySelectedCard].isMovingToBoard=!0,cards[currentlySelectedCard].gridX=gridX,cards[currentlySelectedCard].gridY=gridY,cardGameNameSpace.board[gridY][gridX]=currentlySelectedCard,cards[currentlySelectedCard].zIndex=1,currentlySelectedCard=-1,whoCanClick=currentOpponent);else if("x"!=c){var t=!1;cards[c].hasBeenPlaced||cards[c].currentOwner==whoCanClick&&(t=!0),isPlayer1AI&&1==whoCanClick&&(t=!1),t&&(currentlySelectedCard=c)}}}function gameLoop(){setTimeout(function(){switch(window.requestAnimationFrame(gameLoop),cardGameNameSpace.gameMode){case"loading":console.log("loading...");break;case"play":update(),draw();break;case"gameover":console.log("game over")}},1e3/framesPerSecond)}framesPerSecond=24,cardGameNameSpace.allCardData=allCardData,cardGameNameSpace.player1Cards=player1Cards,cardGameNameSpace.player2Cards=player2Cards,cardGameNameSpace.player2Skill=player2Skill;var numberOfCardTypes,imagesToLoad;cutsTheMustard&&supportsCanvas()&&(cardGameNameSpace.initialiseCardGame(),canvasResizeHandler=debounce(function(){getCanvasPosition()},250),window.addEventListener("resize",canvasResizeHandler));