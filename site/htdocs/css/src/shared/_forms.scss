
// remove Firefox number spinner:
input[type="number"] {
    -moz-appearance: textfield;
}

// remove Chrome number spinner:
input[type=number]::-webkit-outer-spin-button,
input[type=number]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

button, input, select, .selectWrapper, textarea {
     background: #fff;
    color: #212121;
    border: 0;
}




input {
    border: 1px solid #000;
}
input:not(:focus):valid {
  border: 1px solid #64bd63;
}

// select dropdowns --------------------------------
// http://jsbin.com/juvixufu/10/edit?html,output
.selectWrapper {
    position: relative;
    display: block;
    margin-top: 0.5em;
    overflow: hidden;
    width: 100%;
    max-width: 100%;


 select {
    /* Make sure the select is wider than the container so we can clip the arrow */
    cursor: pointer;
    width: 100%;
    max-width: 100%;
    min-width: 100%;
    /* Remove select styling */
    
    appearance: none;
    -webkit-appearance: none;
    /* Ugly Firefox way of doing it */
    
    -moz-appearance: none;
    text-indent: 0.01px;
    text-overflow: "";
 
    background: none;
    border: none;
   
    outline: none;
    /* Padding works surpringly well */
    
    padding: .4em 19% .4em .8em;
    font-family: helvetica, sans-serif;
    line-height: 1.2;
    margin: .2em 0;
}
/* This hides native dropdown button arrow in IE */

 select::-ms-expand {
    display: none;
}

/* Custom arrow - could be an image, SVG, icon font, etc. */

&:after {
    @include iconFont;
    background: none;
    color: #bbb;
    content: "\25BE";
    font-size: 1.5em;
    padding: 0;
    position: absolute;
    right: 0.4em;
    top: 0.2em;
    bottom: .3em;
    z-index: 1;
    /* This hack makes the select behind the arrow clickable in some browsers */
    
    pointer-events: none;
}

/* Focus style */

 select:focus {
    outline: none;

}
/* This hides focus around selected option in FF */

 select:-moz-focusring {
    color: transparent;
    text-shadow: 0 0 0 #000;
}


}

// radio buttons --------------------------------
@supports(-webkit-appearance: none) {
    input[type="radio"] {
        -webkit-appearance: none;
        clear: none;
        display: inline-block;
        cursor: pointer;
        outline: none;
        width: $radioAndCheckboxSize;
        height: $radioAndCheckboxSize;
        border: 1px solid #fff;
        background: #fff;
        position: relative;
        margin-right: 0.5em;
        margin-bottom: 0;
        @include border-radius($radioAndCheckboxSize);
    }

    input[type="radio"]:focus {
        border: 1px solid teal;
    }

    input[type="radio"] {
        position: relative;
        /* Do a bug fix to keep iOS from adding dark background. */
        background: none;
    }

    input[type="radio"]::after {
        content: " ";
        width: ($radioAndCheckboxSize*0.75);
        height: ($radioAndCheckboxSize*0.75);
        left: 1px;
        top: 1px;
        opacity: 0;
        background: $titleColour;
        display: block;
        position: absolute;
        @include border-radius($radioAndCheckboxSize);
        @include transition(opacity 0.3s);
    }

    input[type="radio"]:checked::after {
        opacity: 1;
    }

    @supports (transform: scale(1)) {
        input[type="radio"]::after {
            opacity: 1;

            @include transform(scale(0));
            @include transition(transform 0.3s);
        }

        input[type="radio"]:checked::after {
            @include transform(scale(1));
        }
    }
}






// check boxes --------------------------------
// https://codepen.io/jensimmons/pen/KKPzxJa
@supports(-webkit-appearance: none) {
    input[type="checkbox"] {
        -webkit-appearance: none;
        width: $radioAndCheckboxSize;
        height: $radioAndCheckboxSize;
        border: 1px solid #000;
        background: none;
        margin-bottom: 0;
        outline: none;
    }

    input[type="checkbox"]:focus {
        border: 1px solid teal;
    }

    input[type="checkbox"] {
        position: relative;
        /* Do a bug fix to keep iOS from adding dark background. */
        background: none;
    }

    input[type="checkbox"]::after {
        position: absolute;
        top: 0.05rem;
        left: 0;
        content: '\2713';
        @include iconFont;
        color: $titleColour;
        line-height: 1;
        text-align: center;
        opacity: 0;
        @include transition(opacity 0.4s ease);
    }

    input[type="checkbox"]:checked::after {
        opacity: 1;
    }
}



// ----------------------------
// 'switch' style checkboxes


@supports(-webkit-appearance: none) {

    input[type='checkbox'].switch {

        -webkit-appearance: none;

        outline: none;
        display: inline-block;
        cursor: pointer;
        border: 1px solid #000;
        position: relative;
        margin-right: 0.5em;
        width: $radioAndCheckboxSize*2;
        height: $radioAndCheckboxSize;
        background: #fff;
        border-radius: $radioAndCheckboxSize;
        @include transition(background 0.4s ease);

        &:after {
            color: $titleColour;
            line-height: 1;
            text-align: center;
            position: absolute;
            display: block;
            content: "";
            opacity: 1;
            width: $radioAndCheckboxSize*0.8;
            height: $radioAndCheckboxSize*0.8;
            border-radius: $radioAndCheckboxSize*0.8;
            background: #fff;
            border: 1px solid #000;
            left: 0;
            top: 0;
            @include transition(left 0.4s ease);
            @include transform(scale(1));
        }

        &:checked {
            background: #64bd63;

            &:after {
                left: $radioAndCheckboxSize;
            }
        }
    }

}



// file inputs --------------------------------
// http://tympanus.net/codrops/2015/09/15/styling-customizing-file-inputs-smart-way/
.js {
.fileInput {
    // hide the input visually but keeping it visible for the browser:
    width: 0.1px;
    height: 0.1px;
    opacity: 0;
    overflow: hidden;
    position: absolute;
    z-index: -1;
}

.fileInputLabel {


    color: #fff;
    cursor: pointer;
    background: #000;
    display: inline-block;
}

.fileInput:focus + label,
.fileInputLabel:hover {
    background-color: $titleColour
;
}

.fileInput:focus + label {
    // for keyboard browsing:
    outline: 1px dotted #fff;
    outline: -webkit-focus-ring-color auto 5px;
}

.inputfile + label span {
    pointer-events: none;
}

}



// buttons -----------------------------
.button {
    text-decoration: none;
    background: $titleColour;
    display: inline-block;

    text-transform: uppercase;
    padding: 1% 4%;
    @include transition(background 0.4s ease);
    @include attention() {
        color: #fff;
        background: darken($titleColour,20);
    }
    &:link,&:visited {
        color: #fff;
    }
}
.primary-button {
    @include pxRem("font-size",28px);
}



// progress bars --------------------
progress {
    /* Reset the default appearance */
    // https://css-tricks.com/html5-progress-element/
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    border: none;
    width: 250px;
    height: 20px;
           // hide when not active:
           display: none;
    /* Although firefox doesn't provide any additional pseudo class to style the progress element container, any style applied here works on the container. */
    background-color: whiteSmoke;
    border-radius: 3px;
    box-shadow: 0 2px 3px rgba(0, 0, 0, .5) inset;
    /* Of all IE, only IE10 supports progress element that too partially. It only allows to change the background-color of the progress value using the 'color' attribute. */
    color: teal;
    /*
Webkit browsers provide two pseudo classes that can be use to style HTML5 progress element.
-webkit-progress-bar -> To style the progress element container
-webkit-progress-value -> To style the progress element value.
*/
    &[value]::-webkit-progress-bar {
        background-color: whiteSmoke;
        border-radius: 3px;
        box-shadow: 0 2px 3px rgba(0, 0, 0, .5) inset;
    }
    &[value]::-webkit-progress-value {
        position: relative;
        background: #e06900;
        border-radius: 3px;
    }
    &[value]::-webkit-progress-value:after {
        /* Only webkit/blink browsers understand pseudo elements on pseudo classes. A rare phenomenon! */
        content: '';
        position: absolute;
        width: 5px;
        height: 5px;
        top: 7px;
        right: 7px;
        background-color: white;
        border-radius: 100%;
    }
    /* Firefox provides a single pseudo class to style the progress element value and not for container. -moz-progress-bar */
    &[value]::-moz-progress-bar {
        background: #e06900;
        border-radius: 3px;
    }
    /* Similarly, for Mozilla. Unfortunately combining the styles for different browsers will break every other browser. Hence, we need a separate block. */
    &::-moz-progress-bar {
        background: #e06900;
    }
    &.active {
        display: block;
    }
}


// Chrome autocomplete styles:
// http://webagility.com/posts/the-ultimate-list-of-hacks-for-chromes-forced-yellow-background-on-autocompleted-inputs
input:-webkit-autofill,
input:-webkit-autofill:hover, 
input:-webkit-autofill:focus
input:-webkit-autofill, 
textarea:-webkit-autofill,
textarea:-webkit-autofill:hover
textarea:-webkit-autofill:focus,
select:-webkit-autofill,
select:-webkit-autofill:hover,
select:-webkit-autofill:focus {
 
  border: 1px solid green;
  -webkit-text-fill-color: green;
  -webkit-box-shadow: 0 0 0px 1000px #fff inset;
  transition: background-color 5000s ease-in-out 0s;
}





