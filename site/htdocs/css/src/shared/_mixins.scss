

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@function convertRootPxToEm($value) {
  // check for null:
  @if($value == null) {
    @return $value;
  }
  // assume em:
  @if (unitless($value) or unit($value) == em) {
    @return 0em + $value;
  }
  @else {
    @return 0em + strip-units($value)/16;
  }
}

@function convertPxToRem($px) {
 @return 0rem + strip-units($px)/16;
}

@mixin pxRem($property,$values) {
  // ##########################
  // it'd be nice if this didn't include the @media all if the mixin was called from within a MQ
  // ##########################

  // example usage:
  // @include pxRem('font-size',14);
  // @include pxRem('margin',10 20 30 40);
  // px is assumed though can be specified
  // @include pxRem('margin',10px 20px 30px 40px);
  // percentages remain unconverted:
  // @include pxRem('margin',10 20%);
  // all percentages can be passed to this mixin - shouldn't be needed, but won't break, and won't add unecessary media query:
  // @include pxRem('margin',20%);
  //
  // kudos to Matt Stow's Suzi
  //
  // -----------------------------

  // Create a couple of empty lists as output buffers:
  $px-values: ();
  $rem-values: ();

  // Ensure $values is a list.
  @if type-of($values) != 'list' {
    $values: join((), $values);
  }

  // Loop through the $values list:
  @each $value in $values {
    @if type-of($value) == number and (unitless($value) or unit($value) == px) {
    $px-values: join($px-values, 0px + ($value));
      $rem-values: join($rem-values, convertPxToRem($value));
    }
    @else {
    // no conversion:
    $px-values: join($px-values, $value);
    $rem-values: join($rem-values, $value);
    }
  }

  #{$property}: $px-values;

  // don't add media query if it's not needed:
  @if $px-values != $rem-values {
    @media only all { 
      #{$property}: $rem-values;
    }
  }
}


@mixin animation($values) {
      -webkit-animation: $values;
     -moz-animation: $values;
     -o-animation: $values;
     animation: $values;
}
@mixin animation-duration($value) {
      -webkit-animation-duration: $value;
     -moz-animation-duration: $value;
     -o-animation-duration: $value;
     animation-duration: $value;
}
@mixin animation-fill-mode($value) {
      -webkit-animation-fill-mode: $value;
     -moz-animation-fill-mode: $value;
     -o-animation-fill-mode: $value;
     animation-fill-mode: $value;
}
@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}


@mixin attention() {
// http://sassmeister.com/gist/35c9c323d22eefdbf293

/* use:
 a {
   font-weight: bold;
    text-decoration: none;
    color: #c00;

    @include attention() {
        outline: none;
        color: #09f;
    }

}
*/


    &:hover,
    &:active,
    &:focus {
        @content;
    }

}



 @mixin transform($values...) {
// adding ... allows multiple values to be passed in
-webkit-transform: $values;
-moz-transform: $values;
-o-transform: $values;
transform: $values;
}

 @mixin transform-origin($values...) {
// adding ... allows multiple values to be passed in
-webkit-transform-origin: $values;
-moz-transform-origin: $values;
-o-transform-origin: $values;
transform-origin: $values;
}

 @mixin transition($values...) {
// adding ... allows multiple values to be passed in
-webkit-transition: $values;
-moz-transition: $values;
-o-transition: $values;
transition: $values;
}

 @mixin transition-duration($values...) {
// adding ... allows multiple values to be passed in
-webkit-transition-duration: $values;
-moz-transition-duration: $values;
-o-transition-duration: $values;
transition-duration: $values;
}

@mixin linearGradient($from, $to, $fromPercent:0, $toPercent:100, $direction:to bottom) {
    // simple 2 colour vertical gradients only
    // http://codepen.io/thebabydino/full/pjxVWp/
    //
    // remove % if given and re-add, so it can accept '0' and '0%':
    $fromPercent: 0% + strip-units($fromPercent);
    $toPercent: 0% + strip-units($toPercent);
    // support for older direction syntax
    // to right -> left
    // to bottom -> top etc
    $oldDirectionSupport: (
      'to right': left,
      'to left': right,
      'to bottom': top,
      'to top': bottom,
      'to bottom right': -45deg,
      'to top left': 135deg,
      'to bottom left': -135deg,
      'to top right': 45deg
      );
    $oldDirection: map-get($oldDirectionSupport, ''+$direction);
    // old browsers: 
    background: $from;
    // Chrome 10-25, Safari 5.1-6:
    background: -webkit-linear-gradient($oldDirection, $from $fromPercent, $to $toPercent);
    // W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ :
    background: linear-gradient($direction, $from $fromPercent, $to $toPercent);
}


@mixin radialGradient($from, $to, $fromPercent:0, $toPercent:100) {
    // simple 2 colour radial gradients only
    //
    // remove % if given and re-add, so it can accept '0' and '0%':
    $fromPercent: 0% + strip-units($fromPercent);
    $toPercent: 0% + strip-units($toPercent);
    // old browsers: 
    background: $from;
    background: -webkit-radial-gradient($from $fromPercent, $to $toPercent);
    background: radial-gradient($from $fromPercent, $to $toPercent);
}





@mixin border-radius($radius) {
  // usage:
  // @include border-radius(20px)
  // @include border-radius(5%)
    @if unit($radius)==% {
        -webkit-border-radius: $radius;
        -moz-border-radius: $radius;
        border-radius: $radius;
    } @else {
        -webkit-border-radius: 0px + $radius;
        -moz-border-radius: 0px + $radius;
        border-radius: 0px + $radius;
        @media only all {
            -webkit-border-radius: convertPxToRem($radius);
            -moz-border-radius: convertPxToRem($radius);
            border-radius: convertPxToRem($radius);
        }
    }
}


// mixins are better than @extends when Gzipped - http://csswizardry.com/2016/02/mixins-better-for-performance/
@mixin border-box {
    //
    // @include border-box
    // http://www.sitepoint.com/sass-mixin-placeholder/
    //
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

@mixin visibleHide {
    /* http://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/ */
    position: absolute;
    overflow: hidden;
    clip-path: inset(100%);
    clip: rect(0 0 0 0);
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
}

@mixin clearfix {
    /* Contain floats: h5bp.com/q */
    &:before,
    &:after {
        content: "";
        display: block;
    }
    &:after {
        clear: both;
    }
    *zoom: 1;
}

@mixin iconFont {
    font-family: icomoon;
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    /* Better Font Rendering =========== */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    // enable ligatures (Chrome requires this at least)
    -webkit-font-variant-ligatures: common-ligatures;
    font-variant-ligatures: common-ligatures;
}


@mixin mq($firstBP, $firstMinMax:min, $secondBP:null, $secondMinMax:null) {
  // usage:
  // @include mq(only all)
  // @include mq($mobileportrait)
  // @include mq($mobileportrait,min)
  // @include mq(600px,min)
  // @include mq(31em,min)
  // @include mq($mobileportrait,min,$tabletportrait,max)
  // @include mq($tabletportrait, min, 1200px, max)
  // (defaults to min-width)
  @if type-of($firstBP) != number {
    @if($understandsMQs) {
      @media #{$firstBP} { @content; }
    }
    @else {
    // may need to rethink this if 'print' is needed etc., as older browsers would implement that correctly
      @content;
    }
  }
  @else {
    $mediaQuery: '('+$firstMinMax+'-width: ' + $firstBP + ')';
    @if $secondBP != null {
      $mediaQuery:  $mediaQuery + ' and ('+$secondMinMax+'-width: ' + $secondBP + ')';
    }
    @if($understandsMQs) {
      @media #{$mediaQuery} { @content; }
    }
    @else {
      // check values match IE (defined in variables - $triggerIEAt)
      // convert all values to em to safely compare them:
      $ieTriggerWidth: convertRootPxToEm($triggerIEAt);
      $ieFirstBP: convertRootPxToEm($firstBP);
      $ieSecondBP: convertRootPxToEm($secondBP);
      // create IE output if this MQ is within IE's desired width:
      $isValidforIE: false;
      @if($firstMinMax == min) {
        @if($ieFirstBP <= $ieTriggerWidth) {
          @if $ieSecondBP == null {
            $isValidforIE: true;
          }
          @else {
            @if($ieSecondBP >= $ieTriggerWidth) {
              $isValidforIE: true;
            }
          }
        }
      }
      @else {
        // is a max-width:
        @if($ieFirstBP >= $ieTriggerWidth) {
          @if $ieSecondBP == null {
            $isValidforIE: true;
          }
          @else {
            @if($ieSecondBP <= $ieTriggerWidth) {
              $isValidforIE: true;
            }
          }
        }
      }
      @if($isValidforIE) {
        @content;
      }
    }
  }
}










@mixin background-size($first, $second:null) {
    // usage:
    // @include background-size(100%, 50%);
    // @include background-size(100%); (second value is then 'auto')
    // @include background-size(contain);
    // @include background-size(auto, 50%);
    // @include background-size(inherit);
    @if type-of($first) !=string {
        @if $second==null {
            $second: auto;
        }
    }
    // Safari 3.0:
    -webkit-background-size: $first $second;
    // Gecko 1.9.2 (Firefox 3.6):
    -moz-background-size: $first $second;
    // Opera 9.5:
    -o-background-size: $first $second;
    // Gecko 2.0 (Firefox 4.0) and other CSS3-compliant browsers:
    background-size: $first $second;
}







@mixin box-shadow($values...) {
// usage
// @include box-shadow(inset 0 0 1em gold);

-webkit-box-shadow: $values;
-moz-box-shadow: $values;
box-shadow: $values;
}


@mixin text-shadow($values...) {
// no vendor prefixs needed - just including this mixin to be consistent
text-shadow: $values;
}




@mixin opacity($opacity) {
    @if $understandsMQs==false {
        // IE8 only:
        $opacity-ie: $opacity * 100;
        filter: alpha(opacity=$opacity-ie);
    } @else {
      opacity: $opacity;
    }
}





@mixin column-count($columns) {
    -webkit-column-count: $columns;
    -moz-column-count: $columns;
    column-count: $columns;
}




@mixin centredBlock($paddingFallback:15%) {
    // has a fallback unlike the flex box method - useful for centring a paragraph vertically against a neighbouring image for example
    padding-top: $paddingFallback;
    @supports (transform: translateY(-50%)) {
        padding-top: 0;
        transform: translateY(-50%);
        position: absolute;
        top: 50%;
    }
    @media (-webkit-transform-3d), (transform-3d) {
        padding-top: 0;
        -webkit-transform: translateY(-50%);
        position: absolute;
        top: 50%;
    }
}
